@using System.Linq
@using BiofuelSouth.Enum
@using BiofuelSouth.Helpers
@using BiofuelSouth.Models
@model BiofuelSouth.ViewModels.ResultViewModel
@{
	var key = System.Configuration.ConfigurationManager.AppSettings["ShowPDFLink"];

	var showPdfLink = ( key != null && key.Equals( "true", StringComparison.InvariantCultureIgnoreCase ) );
}

<!DOCTYPE html>
<html lang="en">
<head>
	<title>Bootstrap Case</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	@Styles.Render( "~/Content/site.css" )

	<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
	<link href="~/Content/site.css" rel="stylesheet" />
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
	<script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
	<style>
	</style>
</head>
<body>
	
	<div class="row">
		<div class="col-xs-12">
			<div class="panel with-nav-tabs panel-primary">
				<div class="panel-heading">
					<ul class="nav nav-tabs">
						<li class="active"><a data-toggle="tab" href="#home">Summary</a></li>
						<li><a data-toggle="tab" href="#menu1">Production</a></li>
						<li><a data-toggle="tab" href="#menu2">Cost & Revenue</a></li>
						<li><a data-toggle="tab" href="#menu3">Inputs and Assumptions</a></li>
						<li><a data-toggle="tab" href="#menu4">More Information</a></li>
						@if ( showPdfLink )
						{
							<li>
								<a data-toggle="" href="@Url.Action("GenerateReport", "DSS")"><i class="fa fa-file-pdf-o">&nbsp;PDF Report</i></a>
							</li>
						}
					</ul>
				</div>
				<div class="panel-body">
					<div class="tab-content">
						<div id="home" class="tab-pane fade in active">
							@Html.Partial( "_summaryOverView", Model )
						</div>
						<div id="menu1" class="tab-pane fade">
							<div class="row">
								<div class="col-xs-7">
									<h3>Production Results</h3>
									<p>
										Growing of
										<strong>@Model.CropType</strong> for a duration of
										<strong>@Model.ProjectLife</strong> @GetYearOrYears( Model.ProjectLife ) over an area of
										<strong>@Model.ProjectSize</strong> in
										<strong>@Model.CountyName</strong> County,
										<strong>@Model.StateName</strong> is expected to produce an estimated
										<strong>@Model.AnnualProduction</strong> tons of biomass annually.
									</p>

								</div>
								<div class="col-xs-5">
									@if ( Model.ChartKeys.Select( m => m.Key == ChartType.Production ).Any() )
									{
										var keyValue = Model.ChartKeys.FirstOrDefault( m => m.Key == ChartType.Production ).Value;
										var urlAnnualProduction = Url.Action( "ShowChart", "Chart", new { cacheKey = keyValue } );
										<figure>
											<img src="@urlAnnualProduction" class="img-responsive img-chart" alt="Annual Production Chart" style="max-height: 200px" />
											<figcaption class="text-center">@Constants.ProductionChartCaption( Model.CropType )</figcaption>
										</figure>

									}
								</div>
							</div>

							<div class="row">
								<div class="col-xs-7">
									<h3>Comparison with other crops</h3>
									<p>
										@{
											var high = Model.ComparisionData.FirstOrDefault( m => m.Key == ResultComparisionKey.HighProduction );
											var low = Model.ComparisionData.FirstOrDefault( m => m.Key == ResultComparisionKey.LowProduction );

										}
										@if ( high != null && high.Crop != Model.CropType )
										{
											<span>
												Compared among the select crops in this BDSS, it is anticipated that growing <strong>@high.Crop.ToString()</strong> may likely result in
												the highest production of <strong>@high.ComparisionValue</strong> tons.

											</span>

										}
										else if ( high != null && high.Crop == Model.CropType )
										{
											<span>
												Growing <strong>@high.Crop.ToString()</strong> may likely result in the highest
												production of <strong>@high.ComparisionValue</strong> tons compared to other crops considered in this particular analysis.

											</span>

										}
										@if ( low != null && low.Crop != Model.CropType )
										{
											<span>
												Growing <strong>@low.Crop.ToString()</strong> may likely result in the lowest production of
												<strong>@low.ComparisionValue</strong> tons compared to other crops considered in this particular analysis.

											</span>

										}
										else if ( low != null && low.Crop == Model.CropType )
										{
											<span>
												Growing <strong>@low.Crop.ToString()</strong> may result the the lowest production of
												<strong>@low.ComparisionValue</strong> tons compared to other crops considered in this particular analysis.

											</span>

										}
									</p>

									<a href="#home" data-toggle="tab" class="btn btn-warning">See Summary</a>&nbsp; &nbsp;
									<a href="#menu2" data-toggle="tab" class="btn btn-success">See Cost/Revenue</a>
									@if ( showPdfLink )
									{
										<a href="@Url.Action("GenerateReport", "DSS")" class="btn btn-dss"><i class="fa fa-file-pdf-o "> Download Report</i></a>
									}
								</div>
								<div class="col-xs-5">
									@if ( Model.ChartKeys.Select( m => m.Key == ChartType.ProductionCompare ).Any() )
									{
										var keyValue = Model.ChartKeys.FirstOrDefault( m => m.Key == ChartType.ProductionCompare ).Value;
										var urlAnnualProduction = Url.Action( "ShowChart", "Chart", new { cacheKey = keyValue } );

										<figure>
											<img src="@urlAnnualProduction" class="img-responsive img-chart" alt="Production Compare Chart" style="max-height: 200px" />
											<figcaption class="text-center">@Constants.ProductionCompareChartCaption( Model.CropType )</figcaption>
										</figure>

									}
								</div>

							</div>

						</div>
						<div id="menu2" class="tab-pane fade">
							<div class="row">
								<div class="col-xs-7">
									<h3>Cost And Revenue</h3>
									<p>
										The production comes at an expected annual cost of
										<strong>@Model.AnnualCost</strong> and estimated to yield an annual revenue of
										<strong>@Model.AnnualRevenue</strong>. The net present value of the project is estimated to be
										@GetFormattedStringNegative( Model.NPV ) at assumed prevailing interest rate of
										<strong>@Model.InterestRate.ToString( "P" )</strong>.

									</p>


								</div>

								<div class="col-xs-5">
									@if ( Model.ChartKeys.Select( m => m.Key == ChartType.CostRevenue ).Any() )
									{
										var keyValue = Model.ChartKeys.FirstOrDefault( m => m.Key == ChartType.CostRevenue ).Value;
										var urlAnnualProduction1 = Url.Action( "ShowChart", "Chart", new { cacheKey = keyValue } );

										<figure>
											<img src="@urlAnnualProduction1" class="img-responsive img-chart" alt="Revenue Chart" />
											<figcaption class="text-center">Cost and revenue information</figcaption>
										</figure>

									}
								</div>
							</div>
							<div class="row">
								<div class="col-xs-7">
									<h3>Comparison with other crops</h3>
									<p>
										@{
											var highPrice = Model.ComparisionData.FirstOrDefault( m => m.Key == ResultComparisionKey.HighFarmGatePrice );
											var lowPrice = Model.ComparisionData.FirstOrDefault( m => m.Key == ResultComparisionKey.LowFarmgatePrice );

										}
										@if ( highPrice != null && highPrice.Crop != Model.CropType )
										{
											<span>
												It is anticipated that growing
												<strong>@highPrice.Crop.ToString()</strong> may likely result in the highest farmgate price of
												<strong>@highPrice.ComparisionValue  per ton</strong> compared to other crops selected in this particular analysis.

											</span>

										}
										else if ( highPrice != null && highPrice.Crop == Model.CropType )
										{
											<span>
												It is anticipated that growing
												<strong>@highPrice.Crop.ToString()</strong> is the option that results in the highest farmgate price of
												<strong>@highPrice.ComparisionValue per ton</strong> compared to other crops selected in this particular analysis.

											</span>

										}
										@if ( lowPrice != null && lowPrice.Crop != Model.CropType )
										{
											<span>
												Likewise, it is anticipated that growing
												<strong>@lowPrice.Crop.ToString()</strong> may likely result in the lowest farmgate price of
												<strong>@lowPrice.ComparisionValue per ton</strong> compared to other crops selected in this particular analysis.

											</span>

										}
										else if ( lowPrice != null && lowPrice.Crop == Model.CropType )
										{
											<span>
												Likewise, it is anticipated that growing
												<strong>@lowPrice.Crop.ToString()</strong> may result in the the lowest farmgate price of price of
												<strong>@lowPrice.ComparisionValue per ton</strong> compared to other crops selected in this particular analysis.
											</span>

										}
									</p>

									<a href="#menu1" data-toggle="tab" class="btn btn-warning">See Production</a>&nbsp; &nbsp;
									<a href="#menu3" data-toggle="tab" class="btn btn-success">See Inputs</a>
									@if ( showPdfLink )
									{
										<a href="@Url.Action("GenerateReport", "DSS")" class="btn btn-dss"><i class="fa fa-file-pdf-o "> Download Report</i></a>
									}

								</div>
								<div class="col-xs-5">

									@if ( Model.ChartKeys.Select( m => m.Key == ChartType.CashFlow ).Any() )
									{
										var keyValue = Model.ChartKeys.FirstOrDefault( m => m.Key == ChartType.CashFlow ).Value;
										var urlcashflow = Url.Action( "ShowChart", "Chart", new { cacheKey = keyValue } );


										<figure>
											<img src="@urlcashflow" class="img-responsive img-chart" alt="CashFlow Chart" />
											<figcaption class="text-center">@Constants.CashFlowChartCaption( Model.CropType )</figcaption>
										</figure>
									}

									@if ( Model.ChartKeys.Select( m => m.Key == ChartType.CashFlowCompare ).Any() )
									{
										var keyValue = Model.ChartKeys.FirstOrDefault( m => m.Key == ChartType.CashFlowCompare ).Value;
										var urlcashflow = Url.Action( "ShowChart", "Chart", new { cacheKey = keyValue } );
										<figure id="CashFlowCompareChart">
											<img src="@urlcashflow" class="img-responsive img-chart" alt="CashFlow Compare Chart" />
											<figcaption class="text-center">@Constants.CashFlowCompareChartCaption( Model.CropType )</figcaption>
										</figure>

									}
								</div>
							</div>
						</div>
						<div id="menu3" class="tab-pane fade">
							<h3>Input Data and Assumptions</h3>
							<p>
								The result presented here is based on the following parameters/assumptions. <br />

								<table class="table table-responsive">
									<tr>
										<th>Parameter</th>
										<th>value</th>
										<th>Source/Assumption</th>
									</tr>
									<tr>
										<td>Crop</td>
										<td>@Model.CropType</td>
										<td></td>
									</tr>
									<tr>
										<td>County, State</td>
										<td>@Model.CountyName, @Model.StateName</td>
										<td></td>
									</tr>
									<tr>
										<td>@Html.GetDisplayName( m => Model.ProjectLife )</td>
										<td>@Model.ProjectLife</td>
										<td></td>
									</tr>

									<tr>
										<td>@Html.GetDisplayName( m => Model.ProjectSize )</td>
										<td>@Model.ProjectSize</td>
										<td></td>
									</tr>
									<tr>
										<td>@Html.GetDisplayName( m => Model.InterestRate )</td>
										<td>@Model.InterestRate.ToString( "P1" )</td>
										<td></td>
									</tr>
									<tr>
										<td>Biomass Price at Farm Gate ($/ton)</td>
										<td> @Model.BiomassPriceAtFarmGate.GetValueOrDefault().ToString( "###" )</td>
										<td></td>
									</tr>

									<tr>
										<td>@Html.GetDisplayName(m => Model.LandCost)"</td>
										<td>@Model.LandCost</td>
										<td></td>
									</tr>

									<tr>
										<td>@Html.GetDisplayName( m => Model.AverageCostPerAcre )</td>
										<td>@Model.AverageCostPerAcre</td>
										<td></td>
									</tr>
									<tr>
										<td>@Html.GetDisplayName( m => Model.AverageProdutivityPerAcre )</td>
										<td>@Model.AverageProdutivityPerAcre</td>
										<td></td>
									</tr>

									@if ( !Model.RequireStorage )
									{
										<tr>
											<td>Crop Storage</td>
											<td>Not Required/Not Applicable</td>
											<td></td>
										</tr>}
									else
									{
										<tr>
											<td>@Html.GetDisplayName( m => Model.StorageTime )</td>
											<td>@Model.StorageTime</td>
											<td></td>
										</tr>

										<tr>
											<td>@Html.GetDisplayName( m => Model.StoragePercent )</td>
											<td>@Model.StoragePercent</td>
											<td></td>
										</tr>

										@*<tr>
											<td>@Html.GetDisplayName(m => Model.StorageLossFactor)</td>
											<td>@Model.StorageLossFactor</td>
											<td></td>
										</tr>*@

										<tr>
											<td>@Html.GetDisplayName(m => Model.StorageMethod)</td>
											<td>@Model.StorageMethod</td>
											<td></td>
										</tr>

										<tr>
											<td>@Html.GetDisplayName( m => Model.StorageCostmethod )</td>
											<td>@Model.StorageCostmethod</td>
											<td></td>
										</tr>
									}
								

									@if ( !Model.RequireFinance )
									{
										<tr>
											<td>Financing</td>
											<td>Not Required/Not Applicable</td>
											<td></td>
										</tr>
									}
									else
									{

										<tr>
											<td>@Html.GetDisplayName( m => Model.AdministrativeCost )</td>
											<td>@Model.AdministrativeCost.ToString( "##,###" )</td>
											<td></td>
										</tr>
										<tr>
											<td>@Html.GetDisplayName( m => Model.IncentivePayment )</td>
											<td>@Model.IncentivePayment.ToString( "##,###" )</td>
											<td></td>
										</tr>
										
										<tr>
											<td>@Html.GetDisplayName( m => Model.YearsOfIncentivePayment )</td>
											<td>@Model.YearsOfIncentivePayment.ToString( "##,###" )</td>
											<td></td>
										</tr>
										
										<tr>
											<td>@Html.GetDisplayName( m => Model.AvailableEquity )</td>
											<td>@Model.AvailableEquity.ToString( "##,###" )</td>
											<td></td>
										</tr>
										
										<tr>
											<td>@Html.GetDisplayName( m => Model.LoanAmount )</td>
											<td>@Model.LoanAmount.ToString( "##,###" )</td>
											<td></td>
										</tr>
										
										<tr>
											<td>@Html.GetDisplayName( m => Model.EquityLoanInterestRate )</td>
											<td>@Model.EquityLoanInterestRate.ToString("##.##")</td>
											<td></td>
										</tr>


									}
									<tr>
										<td></td>
										<td></td>
										<td></td>
									</tr>

								</table>

							</p>

							<p>
								You can change the inputs to analyze how such change may impact the result.
								To change input parameters, click @Html.ActionLink( "Change Inputs", "General", "DSS", new { @class = "btn btn-primary" } ).
							</p>

							<p>
								Alternatively, you can also start over with new information. To start over,
								click @Html.ActionLink( "Start Over", "NewDSS", "DSS", new { @class = "btn btn-primary" } ).
							</p>

							<a href="#menu2" data-toggle="tab" class="btn btn-warning">See Cost/Revenue</a>
							<a href="#menu4" data-toggle="tab" class="btn btn-success">More Information</a>
							@if ( showPdfLink )
							{
								<a href="@Url.Action("GenerateReport", "DSS")" class="btn btn-dss"><i class="fa fa-file-pdf-o "> Download Report</i></a>
							}
						</div>
						<div id="menu4" class="tab-pane fade">
							<div id="moreinformation">
								@Html.Partial( "_moreinformation" )

								<a href="#menu3" data-toggle="tab" class="btn btn-warning">See Inputs</a>
								<a href="#home" data-toggle="tab" class="btn btn-success">See Summary</a>&nbsp; &nbsp;
								@if ( showPdfLink )
								{
									<a href="@Url.Action("GenerateReport", "DSS")" class="btn btn-dss"><i class="fa fa-file-pdf-o "> Download Report</i></a>
								}
							</div>
						</div>
					</div>
				</div>
			</div>
			@Html.Partial( "_Disclaimer" )
		</div>
	</div>




</body>
</html>


@functions
{
	MvcHtmlString GetFormattedStringNegative( decimal value, string format = "C0" )
	{
		var val = value.ToString( format );
		var formattted = string.Format( "<strong>{0}</strong>", val );
		if ( value < 0 )
		{

			formattted = string.Format( "<span class='text-danger'><strong>{0}</strong></span>", val );

		}
		return new MvcHtmlString( formattted );



	}

	string GetYearOrYears( decimal value )
	{
		return value == 1 ? "year" : "years";
	}

}
