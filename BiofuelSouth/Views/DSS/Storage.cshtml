@using BiofuelSouth.Enum
@using BiofuelSouth.Models
@using BiofuelSouth.Resources
@model Storage

@{
	var pageMain = "Storage Information";
	ViewBag.Title = String.Format( "{0}:{1}", pageMain, GeneralResource.DSS_Tittle_Display );
}

@using ( Html.BeginForm( "Storage", "DSS" ) )
{
	@Html.AntiForgeryToken()


	<div class="row">
		<div class="col-md-8 form-group">
			<div class="panel panel-default">
				<div class="panel-heading">
					@pageMain
				</div>
				<div class="panel-body">
					@Html.ValidationSummary( true, "", new { @class = "text-danger" } )

					<div class="row">
						<div class="col-xs-12">
							@Html.LabelFor(model => model.RequireStorage, new {@class = "control-label"})
							<a href="#" rel="popover" class="" data-toggle="popover" tabindex="-1" data-trigger="focus"
							   data-placement="center" title="Require Finance" data-content="<p>If the project require
                            storage, select Yes. </p>">
									<span class="glyphicon glyphicon-question-sign"></span></a>
							<span class="required">Required </span>

							@Html.DropDownListFor(x => x.RequireStorage, Constants.GetYesNo(), "Select", new {@class = "form-control", required = "required"})
							@Html.ValidationMessageFor(model => model.RequireStorage, "", new {@class = "text-danger"})
						</div>

						<div class="col-xs-6"></div>
					</div>

					<div id="storageParameter" hidden="hidden">
						<div class="row">

							<div class="col-xs-6">


								@Html.LabelFor( model => model.StorageTime, new { @class = "control-label" } )<span class="required">Required</span>
								<a href="#" rel="popover" class="" data-toggle="popover" tabindex="-1" data-trigger="focus"
								   data-placement="left" title="Storage Time" data-content="<p>Number of days harvested biomass crop require storage facility.
                    The maximum number of days for storage is 200 days. </p>">
											<span class="glyphicon glyphicon-question-sign"></span></a>
								@Html.TextBoxFor( model => model.StorageTime, new { @class = "form-control", Value = "" } )
								@Html.ValidationMessageFor( model => model.StorageTime, "", new { @class = "text-danger" } )

							</div>
							<div class="col-xs-6">


								@Html.LabelFor( model => model.PercentStored, new { @class = "control-label" } )<span class="required">Required</span>
								<a href="#" rel="popover" class="" data-toggle="popover" tabindex="-1" data-trigger="focus"
								   data-placement="left" title="Storage Percent" data-content="<p>Proportion of harvested crop requiring storage.
                       For example, out of the 100 tons of crop harvested, if only 20 tons require storage while rest of the 80 tons are sold at the time of harvest, then
                    proportion requiring storage can be calculated as 20/100*100% = 20%.</p>"><span class="glyphicon glyphicon-question-sign"></span></a>

								@Html.TextBoxFor( model => model.PercentStored, new { @class = "form-control", Value = "" } )
								@Html.ValidationMessageFor( model => model.PercentStored, "", new { @class = "text-danger" } )

							</div>

							<div class="col-xs-6">


								@Html.LabelFor( model => model.StorageMethod, new { @class = "control-label" } )<span class="required">Required</span>
								<a href="#" rel="popover" class="" data-toggle="popover" tabindex="-1" data-trigger="focus"
								   data-placement="left" title="Storage Percent" data-content="<p>After-harvest storage methods of switchgrass and other perennial grasses grown for biofuel have a significant effect on the profitability and success of an enterprise. Depending on how it's harvested, feedstock can be stored as round or square dry bales, or as a moist product in bunkers or silo bags.</p>">
									<span class="glyphicon glyphicon-question-sign"></span>
								</a>
								@Html.DropDownListFor( model => model.StorageMethod, Constants.GetStorageMethod(), "Select Method", new { @class = "form-control" } )
								@Html.ValidationMessageFor( model => model.StorageMethod, "", new { @class = "text-danger" } )

							</div>

							<div class="col-xs-6">

								@Html.LabelFor( m => m.CostOption, new { @class = "control-label" } ) <span class="required">Required</span>
								@Html.DropDownListFor( m => m.CostOption, EnumHelper.GetSelectList( typeof( StorageCostEstimationOption ) ), "Select", new { @class = "form-control" } )
								@Html.ValidationMessageFor( m => m.CostOption, "", new { @class = "text-danger" } )

							</div>
						</div>

						<div class="">
							@Html.Partial( "_storageCostSelection", Model )
						</div>
					</div>

					<div class="row">
						<div class="col-xs-12 text-center">
							<br />
							@Html.ActionLink("Previous", "GetProductionCost", "DSS", null, new {@class = "btn btn-warning"})&nbsp;&nbsp;

							<button type="reset" value="@UIText.ResetButtonLabel" class="btn btn-primary">@UIText.ResetButtonLabel</button>&nbsp;&nbsp;
							<input type="submit" value="@UIText.ProceedButtonLabel" class="btn btn-success" />

						</div>
					</div>

				</div>
			</div>
		</div>

		<div class="col-md-4 form-group">
			<div class="panel panel-default">
				<div class="panel-heading instruction-panel-heading">
					Instructions: @pageMain
				</div>
				<div class="panel-body Instruction-panel-body">
					Instructions: @pageMain

					<p>
						Storage of crop may not be always necessary. For example, not all woody crops may necessarily require storage.
					</p>
					<p>
						For storage, methods applicable for agricultural crop storage are used for non-woody crops.
						User may select from round or rectangular bale, with or without tarp and gravel, pallet or bare ground.

					</p>
					<p>
						Please specify if storage is needed or not.
					</p>
					<p>
					    If it is needed, then enter number of days of storage, estimated percent of total harvest requiring storage and storage 
                        method to be used.
					</p>

					<p> A system generated cost can be accepted, or a lump sum storage cost can be entered or materials costs can be entered to derive the storage cost for a selected method. </p>
				</div>
			</div>

		</div>

	</div>

}


@section MyScripts {

	<script type="text/javascript">
		//http://www.codeproject.com/Articles/730953/Cascading-Dropdown-List-With-MVC-LINQ-to-SQL-and-A
		$(document).ready(function () {
			$("#county").prop("disabled", true);

			if ($('#state').val() != "Select State") {
				$("#county").prop("disabled", false);
				populateCounty();

			}

			$('#RequireStorage').change();
			$('#CostOption').change();


			$("#state").change(function () {
				if ($("#state").val() != "Select County") {
					populateCounty();
				}

			}
	);
			//$("#summaryHead").html('<h2>Summay for Switchgrass in'+$('#county').val() + "," + $('#state').val() + '</h2>');

		});

		function populateCounty() {
			var ddlCounty = $("#county");
			$.ajax({
				url: "/data/CountiesForState",
				cache: false,
				type: "GET",
				data: { state: $("#state").val() },

				success: function (data) {
					$("#county").empty();
					ddlCounty.append($('<option></option>').val('').html("Select County"));
					$.each(data, function (id, option) {
						ddlCounty.append($('<option></option>').val(option.id).html(option.name));
					});
					$("#county").prop("disabled", false);
				},

				error: function () {
					alert('Failed to retrieve county.');
					$("#county").prop("disabled", true);
				}
			});
		}

		$('#CostOption').on("change", function () {
			if (this.value == 1) {
				$('#UserSupplyStorageCost').show();

			} else {
				$('#UserSupplyStorageCost').hide();

			}
			if (this.value == 2) {
				$('#UserSupplyMaterialCost').show();

			} else {
				$('#UserSupplyMaterialCost').hide();

			}
		});

		$('#RequireStorage').change(function () {

			// alert($('#RequireFinance').val());
			if ($('#RequireStorage').val() == 'true') {
				//alert($('#RequireFinance').val());
				$('#storageParameter').show();
			} else {
				$('#storageParameter').hide();
			}
		});



	</script>



}

