@using System.Globalization
@using System.Linq
@using BiofuelSouth.Enum
@model BiofuelSouth.ViewModels.ResultViewModel


<div class="col-xs-7">
	<h3>
		Overview @Model.CropType in @Model.CountyName (@Model.StateCode)
	</h3>
	<p>
		@*Move to template *@

		Growing of
		<strong>@Model.CropType</strong> for a duration of
		<strong>@Model.ProjectLife</strong> over an area of
		<strong>@Model.ProjectSize</strong> in
		<strong>@Model.CountyName</strong> county of
		<strong>@Model.StateName</strong> is expected to produce an estimated
		<strong>@Model.AnnualProduction</strong> tons of biomass annually.

		The production comes at an expected annual cost of
		<strong>@Model.AnnualCost</strong> and results in an annual revenue of
		<strong>@Model.AnnualRevenue</strong>.

		The @Html.ActionLink("net present value (NPV)", "Search", "Home", new {term = "NPV"}, null)
		of the project is estimated to be <strong>@Model.NPV.ToString("C0")</strong> at assumed
		prevailing interest rate of <strong>@Model.InterestRate.ToString("P")</strong>.


		@if (Model.NPV < 0)
			{
			<span>
				This means there will be a net loss of <span class="text-danger"><strong>  @Model.NPV.ToString("C0") </strong></span> from this project during project's life.
			</span>
			}
			else
			{
			<span>
				This means there will be a net profit of <strong>@Model.NPV.ToString("C0")</strong> from this project during project's life.
			</span>
			}
	</p>

	<h3>Comparison with other crops</h3>

		@{
				var highNPV = @Model.ComparisionData.FirstOrDefault( m => m.Key == ResultComparisionKey.HighNpv );
				var lowNPV = @Model.ComparisionData.FirstOrDefault( m => m.Key == ResultComparisionKey.LowNpv );

		}
		@if ( highNPV != null && highNPV.Crop != Model.CropType )
			{
				var highNpv = Decimal.Parse( highNPV.ComparisionValue );

				if ( highNpv >= 0 )
				{
			<span>
				It is anticipated that growing
				<strong>@highNPV.Crop.ToString()</strong> may likely result in highest NPV
				resulting into net profit of <strong>@highNpv.ToString( "C0" )</strong>

			</span>
				}
				else
				{
			<span>
				It is anticipated that growing
				<strong>@highNPV.Crop.ToString()</strong> may likely result in highest NPV
				resulting into a net loss of <strong>@highNpv.ToString( "C0" )</strong>
			</span>
				}

			}
			else if ( highNPV != null && highNPV.Crop == @Model.CropType )
			{
			<span>
				Likewise, it is anticipated that growing
				<strong>@highNPV.Crop.ToString()</strong> may likely result in highest profit compared to other crops.

			</span>

			}
		@if ( lowNPV != null && lowNPV.Crop != @Model.CropType )
			{
				var lowNpv = Decimal.Parse( lowNPV.ComparisionValue );


				if ( lowNpv >= 0 )
				{
			<span>
				It is anticipated that growing
				<strong>@lowNPV.Crop.ToString()</strong> may likely result in lowest NPV
				resulting into net profit of <strong>@lowNpv.ToString( "C0" )</strong>
			</span>

				}
				else
				{
			<span>
				It is anticipated that growing
				<strong>@lowNPV.Crop.ToString()</strong> may likely result in lowest NPV
				resulting into a net loss of <span class="text-danger"><strong>@lowNpv.ToString( "C0" )</strong></span>
			</span>
				}

			}
			else if ( lowNPV != null && lowNPV.Crop == @Model.CropType )
			{
			<span>
				Likewise, it is anticipated that growing
				<strong>@lowNPV.Crop.ToString()</strong> may result the lowest profit compared to growing other crops.

			</span>

			}


	<div class="col-xs-9 pull-right">

		@if ( Model.ChartKeys.Select( m => m.Key == ChartType.NPVCompare ).Any() )
			{
				var keyValue = Model.ChartKeys.FirstOrDefault( m => m.Key == ChartType.NPVCompare ).Value;
				var urlAnnualProduction = Url.Action( "ShowChart", "Chart", new { @cacheKey = keyValue } );
			<figure>
				<img src="@urlAnnualProduction" class="img-responsive img-chart" alt="NPV Compare Chart" />
				<figcaption class="text-center">Comparision of NPV across various biofuel crops.</figcaption>
			</figure>
			}

	</div>

	<div class="col-xs-12">
		@Html.ActionLink( "Change Inputs", "General", "DSS", new { @class = "btn btn-primary" } ).
		<a href="#menu1" data-toggle="tab" class="btn btn-success">See Production</a>
	</div>

</div>
<div class="col-xs-5">
	<br />
	<figure>
		<img src=@Model.ImageUrl.Item1 class="img-responsive" style="max-height: 200px;" />
		<figcaption class="figcaption text-center">@Model.ImageUrl.Item2</figcaption>
	</figure>

	<p>
		<br />
		@if ( Model.County != null )
		{
			@Html.Partial( "_CountyMap", Model )
		}
	</p>




</div>



@*<script>
		function initialize() {
			var latlng = new google.maps.LatLng(-34.397, 150.644);
			var options =
			{
				zoom: 3,
				center: new google.maps.LatLng(37.09, -95.71),
				mapTypeId: google.maps.MapTypeId.ROADMAP,
				mapTypeControl: true,
				mapTypeControlOptions:
				{
					style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,
					poistion: google.maps.ControlPosition.TOP_RIGHT,
					mapTypeIds: [google.maps.MapTypeId.ROADMAP,
						google.maps.MapTypeId.TERRAIN,
						google.maps.MapTypeId.HYBRID,
						google.maps.MapTypeId.SATELLITE]
				},
				navigationControl: true,
				navigationControlOptions:
				{
					style: google.maps.NavigationControlStyle.ZOOM_PAN
				},
				scaleControl: true,
				disableDoubleClickZoom: true,
				draggable: false,
				streetViewControl: true,
				draggableCursor: 'move'
			};
			var map = new google.maps.Map(document.getElementById("map"), options);
		}
		window.onload = initialize;
	</script>*@


