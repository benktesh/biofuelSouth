@using System.Linq
@using BiofuelSouth.Enum
@model BiofuelSouth.ViewModels.ResultViewModel

@{
    var key = System.Configuration.ConfigurationManager.AppSettings["ShowPDFLink"];

    var ShowPDFLink = ( key != null && key.Equals( "true", StringComparison.InvariantCultureIgnoreCase ) );
}
<div class="col-xs-7">
    <h3>
        Overview of @Model.CropType in @Model.CountyName, @Model.StateName
    </h3>
    <p>
        @*Move to template *@

        Growing of
        <strong>@Model.CropType</strong> for a duration of
        <strong>@Model.ProjectLife</strong> @(Model.ProjectLife == 1 ? "year" : "years") over an area of
        <strong>@Model.ProjectSize</strong> in
        <strong>@Model.CountyName</strong> County,
        <strong>@Model.StateName</strong> (see <strong>Map 1</strong>) is expected to produce an estimated
        <strong>@Model.AnnualProduction</strong> tons of biomass annually.

        The production comes at an expected annual cost of
        <strong>@Model.AnnualCost</strong> and results in an annual revenue of
        <strong>@Model.AnnualRevenue</strong>.

        The @Html.ActionLink( "net present value (NPV)", "Search", "Home", new { term = "NPV" }, null )
        of the project is estimated to be @(GetFormattedStringNegative(Model.NPV)) at assumed
        prevailing interest rate of <strong>@Model.InterestRate.ToString( "P" )</strong>.


        @if ( Model.NPV < 0 )
        {
            <span>
                This means there will be a net loss of <span class='text-danger'><strong>  @Model.NPV.ToString( "C0" ) </strong></span> from this project during project's life.
            </span>}
        else
        {
            <span>
                This means there will be a net profit of <strong>@Model.NPV.ToString( "C0" )</strong>
                from this project during project's life (@Model.ProjectLife.ToString() years).
            </span>}
    </p>

    <h3>Comparison with other crops</h3>

    @{
        var highNPV = Model.ComparisionData.FirstOrDefault( m => m.Key == ResultComparisionKey.HighNpv );
        var lowNPV = Model.ComparisionData.FirstOrDefault( m => m.Key == ResultComparisionKey.LowNpv );

    }
    @if ( highNPV != null && highNPV.Crop != Model.CropType )
    {
        var highNpv = Decimal.Parse( highNPV.ComparisionValue );

        if ( highNpv >= 0 )
        {
            <span>
                Among the crops considered in this particular analysis, it is anticipated that growing
                <strong>@highNPV.Crop.ToString()</strong> may likely result in the highest NPV
                with a net profit of <strong>@highNpv.ToString( "C0" )</strong>.

            </span>    
        }
        else
        {
            <span>
                It is anticipated that growing
                <strong>@highNPV.Crop.ToString()</strong> may likely result in the highest NPV with
                a net loss of <strong>@highNpv.ToString( "C0" )</strong>.
            </span>    
        }

    }
    else if ( highNPV != null && highNPV.Crop == Model.CropType )
    {
        <span>
            Compared among the select crops in this BDSS, it is anticipated that growing
            <strong>@highNPV.Crop.ToString()</strong> may likely result in the best return to investment compared to other crops.

        </span>

    }
    @if ( lowNPV != null && lowNPV.Crop != Model.CropType )
    {
        var lowNpv = Decimal.Parse( lowNPV.ComparisionValue );


        if ( lowNpv >= 0 )
        {
            <span>
                Among the crops considered in this particular analysis, it is anticipated that growing
                <strong>@lowNPV.Crop.ToString()</strong> may likely result in the lowest NPV
                with a net profit of <strong>@lowNpv.ToString( "C0" )</strong>.
            </span>

        }
        else
        {
            <span>
                Among the crops considered in this particular analysis, it is anticipated that growing
                <strong>@lowNPV.Crop.ToString()</strong> may likely result in the lowest NPV
                with a net loss of <span class="text-danger">
                    <strong>@lowNpv.ToString( "C0" )</strong>.
                </span>
            </span>    
        }

    }
    else if ( lowNPV != null && lowNPV.Crop == Model.CropType )
    {
        <span>
            Likewise, it is anticipated that growing
            <strong>@lowNPV.Crop.ToString()</strong> may result the lowest return to investement compared to growing other crops.

        </span>

    }
    Graph 1 shows comparision of <strong>@Model.CropType</strong> with other crops.

    <div class="col-xs-9 pull-right">

        @if ( Model.ChartKeys.Select( m => m.Key == ChartType.NPVCompare ).Any() )
        {
            var keyValue = Model.ChartKeys.FirstOrDefault( m => m.Key == ChartType.NPVCompare ).Value;
            var urlAnnualProduction = Url.Action( "ShowChart", "Chart", new { cacheKey = keyValue } );
            <figure>
                <img src="@urlAnnualProduction" class="img-responsive img-chart" alt="NPV Compare Chart" />
                <figcaption class="text-center">Graph 1. Comparision of project NPV ($) across various biofuel crops.</figcaption>
            </figure>}

    </div>

    <div class="col-xs-12">
        @Html.ActionLink( "Change Inputs", "General", "DSS", new { @class = "btn btn-primary" } ).
        <a href="#menu1" data-toggle="tab" class="btn btn-success">See Production</a>
        @if ( ShowPDFLink )
        {
            <a href="@Url.Action("GenerateReport", "DSS")" class="btn btn-dss"><i class="fa fa-file-pdf-o "> Download Report</i></a>}
    </div>

</div>
<div class="col-xs-5">
    <br />
    <figure>
        <img src=@Model.ImageUrl.Item1 class="img-responsive" style="max-height: 200px;" />
        <figcaption class="figcaption text-center">Photo 1. @Model.ImageUrl.Item2</figcaption>
    </figure>

    <p>
        <br />
         @Html.Partial( "_CountyMap", Model )
    </p>




</div>



@*<script>
        function initialize() {
            var latlng = new google.maps.LatLng(-34.397, 150.644);
            var options =
            {
                zoom: 3,
                center: new google.maps.LatLng(37.09, -95.71),
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                mapTypeControl: true,
                mapTypeControlOptions:
                {
                    style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,
                    poistion: google.maps.ControlPosition.TOP_RIGHT,
                    mapTypeIds: [google.maps.MapTypeId.ROADMAP,
                        google.maps.MapTypeId.TERRAIN,
                        google.maps.MapTypeId.HYBRID,
                        google.maps.MapTypeId.SATELLITE]
                },
                navigationControl: true,
                navigationControlOptions:
                {
                    style: google.maps.NavigationControlStyle.ZOOM_PAN
                },
                scaleControl: true,
                disableDoubleClickZoom: true,
                draggable: false,
                streetViewControl: true,
                draggableCursor: 'move'
            };
            var map = new google.maps.Map(document.getElementById("map"), options);
        }
        window.onload = initialize;
    </script>*@

@functions {

    MvcHtmlString GetFormattedStringNegative(decimal value, string format = "C0")
    {
        var val = value.ToString(format);
        var formattted = string.Format("<strong>{0}</strong>", val);
        if (value < 0)
        {

            formattted = string.Format("<span class='text-danger'><strong>{0}</strong></span>", val);

        }
        return new MvcHtmlString(formattted);



    }

    string GetYearOrYears(decimal value)
    {
        return value == 1 ? "year" : "years";
    }
}
