@using BiofuelSouth.Models
@using BiofuelSouth.Resources
@model General

@{
    ViewBag.Title = String.Format("Project Information: {0}", GeneralResource.DSS_Tittle_Display); 
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


    <div class="row">
        <div class="col-md-8">
            <div class="form-horizontal">
                <div class="row">
                    <div class="col-md-6 form-group">
                        <h4>DSS Input</h4>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6 form-group">

                        @Html.LabelFor(model => model.State, new {@class = "control-label"})<span class="required">Required</span>
                        <a class="" data-content="<p>State of the production of biofuel crop.</p>" data-placement="center" data-toggle="popover" data-trigger="focus" href="#" rel="popover" tabindex="0" title="State">
                            <span class="glyphicon glyphicon-question-sign"></span>
                        </a>
                        @Html.DropDownListFor(model => model.State, Model.StateList, "Select State", new {@class = "form-control", id = "state"})
                        @Html.ValidationMessageFor(model => model.State, "", new {@class = "text-danger"})
                    </div>
                    <div class="col-md-6 form-group">
                        @Html.LabelFor(model => model.County, new {@class = "control-label"})<span class="required">Required</span>
                        <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                           data-placement="center" title="County" data-content="<p>County of production.</p>">
                            <span class="glyphicon glyphicon-question-sign"></span></a>
                        @Html.DropDownListFor(model => model.County, Model.CountyList, "Select County", new {@class = "form-control", name = "county", id = "county"})
                        @Html.ValidationMessageFor(model => model.County, "", new {@class = "text-danger"})
                    </div>


                    <div class="col-md-6 form-group">
                        @Html.LabelFor(model => model.Category, new {@class = "control-label"})<span class="required">Required</span>
                        <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                           data-placement="center" title="Crop category" data-content="<p>Select the type of biofuel crops. If you do not find a crop in the list, please contact us.</p>">
                            <span class="glyphicon glyphicon-question-sign"></span></a>
                        @Html.DropDownListFor(model => model.Category, Constants.GetCategory(), "Select Crop Category", new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.Category, "", new {@class = "text-danger"})
                    </div>
                    <div class="col-md-6 form-group">

                        @Html.LabelFor(model => model.ProjectSize, new {@class = "control-label"})<span class="required">Required</span>
                        <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                           data-placement="center" title="Help" data-content="<p>Enter size of the potential project. The area must be in acres. If you do not yet know the size, use any reasonable acre.</p>">
                            <span class="glyphicon glyphicon-question-sign"></span></a>
                        @Html.TextBoxFor(model => model.ProjectSize, new {type = "number", min = "1", @class = "form-control"})
                        @Html.ValidationMessageFor(model => model.ProjectSize, "", new {@class = "text-danger"})
                    </div>
                    <div class="col-md-6 form-group">
                        @Html.LabelFor(model => model.ProjectLife, new {@class = "control-label"})<span class="required">Required</span>
                        <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                           data-placement="left" title="Project Duration" data-content="<p>Duration of project expressed as total number of years
                    between first plantation and final harvest with intermediate harvests in between. The number must a whole number i.e. 1 or 2 or 10 for a year.</p>">
                            <span class="glyphicon glyphicon-question-sign"></span></a>
                        @Html.TextBoxFor(model => model.ProjectLife, new {@class = "form-control", type = "number", min = "1"})
                        @Html.ValidationMessageFor(model => model.ProjectLife, "", new {@class = "text-danger"})
                    </div>
                    <div class="col-md-6 form-group">
                        @Html.LabelFor(model => model.BiomassPriceAtFarmGate, new {@class = "control-label"})
                        <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                           data-placement="left" title="Farm Gate Price" data-content="<p>The price of the product at which it is sold by the farm (the farm gate price).</p>">
                            <span class="glyphicon glyphicon-question-sign"></span></a>
                        @Html.EditorFor(model => model.BiomassPriceAtFarmGate, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.BiomassPriceAtFarmGate, "", new {@class = "text-danger"})
                    </div>
                    <div class="col-md-6 form-group">
                        @Html.LabelFor(model => model.LandCost, new {@class = "control-label"})<span class="required">Required</span>
                        <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                           data-placement="left" title="Land Cost" data-content="<p>Annual cost of land expressed as  $/acre/year.</p>">
                            <span class="glyphicon glyphicon-question-sign"></span></a>
                        @Html.EditorFor(model => model.LandCost, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.LandCost, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12 form-group pull-left">
                        <button type="reset" value="Reset" class="btn btn-default">Reset</button>&nbsp;&nbsp;
                        <input type="submit" value="Submit" class="btn btn-default"/>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <h4>Instructions: Project parameters</h4>
            
                <p>This step is the first step to run Biofuel Decision Support Step</p>
                <p>Start with selecting a State. If one State is not listed, the BDSS is not available for that state. </p>
                <p>
                    Upson State selection, available counties will be populated in the County. If one or more County is not avaialble, the BDSS currently does not have enough information for that county.
                    In such cases, selecting a neighboring county is suggested.
                </p>
                <p>Select crop category. BDSS can support a number of crops and new crop categories are added as need arises.</p>
                <p>Years from plantation to harvest and farm gate price are provided with some default values. </p>
                <p>The default values for years from plantation to harvest and farm gate price change if the crop type is changed. </p>
                <p>The default values for cost of land is provided for reference.</p>
                <p>Locally available accurate values can be used instead of defaults in all cases.</p>
            
        </div>
    </div>

}

@section MyScripts {

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        //http://www.codeproject.com/Articles/730953/Cascading-Dropdown-List-With-MVC-LINQ-to-SQL-and-A

        $(document).ready(function () {

            if ($('#state').val() !== "") {
                $("#county").attr("disabled", false);
                $('#county').attr('selectedIndex', 0);
                populateCounty();
            }


            $('#Category').change(function () {

                var selectedCrop = $('#Category').val();
                if (selectedCrop === 'Switchgrass') {
                    $('#BiomassPriceAtFarmGate').val('65');
                }
                else if (selectedCrop === 'Miscanthus') {
                    $('#BiomassPriceAtFarmGate').val('45');
                }
                else if (selectedCrop === 'Poplar') {
                    $('#BiomassPriceAtFarmGate').val('30');
                }
                else if (selectedCrop === 'Willow') {
                    $('#BiomassPriceAtFarmGate').val('30');
                }
                else if (selectedCrop === 'Pine') {
                    $('#BiomassPriceAtFarmGate').val('30');
                }
            });

            $('#state').change(function () {
                // alert('yes');
                if ($('#state').val() === "") {

                    //    alert('Please select state first');
                    $('#county').attr('selectedIndex', 0);
                }

            });
            $("#state").change(function () {
                if ($("#state").val() !== "Select County") {
                    populateCounty();
                }

            }
    );
            //$("#summaryHead").html('<h2>Summay for Switchgrass in'+$('#county').val() + "," + $('#state').val() + '</h2>');

        });

        function populateCounty() {
            var selectedValue = $('#county').val();


            // return false;
            //alert("getting couty");
            var ddlCounty = $("#county");
            var state = $("#state").val();

            if (state === "") {
                $('#county').attr('disabled', true);
                $('#county'), attr('selectedIndex', 0);
                state = "ALL";
            }
            $.ajax({
                url: "/data/CountiesForState",
                cache: false,
                type: "GET",
                data: { state: state },

                success: function (data) {
                    $("#county").empty();
                    ddlCounty.append($('<option></option>').val('').html("Select County"));
                    $.each(data, function (id, option) {
                        ddlCounty.append($('<option></option>').val(option.id).html(option.name));
                    });
                    $("#county").prop("disabled", false);
                    $('#county').val(selectedValue).change();
                },

                error: function () {
                    alert('Failed to retrieve county.');
                    $("#county").prop("disabled", true);
                }
            });
        }
    </script>
}
