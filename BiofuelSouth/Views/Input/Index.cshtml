@model BiofuelSouth.Models.Input



@{
    ViewBag.Title = "Index";
}
@using (Html.BeginForm())
{

    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>DSS Input</h4>
        @Html.Partial("_DSSMenu")
        <div class="row">
            <div class="container col-md-4">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.State, new { @class = "control-label" })
                    <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                       data-placement="center" title="State" data-content="<p>State of the production of biofuel crop.</p>">
                         <span class="glyphicon glyphicon-question-sign"></span></a>
                    <div class="row">
                        
                        
                            @Html.DropDownListFor(model => model.State, (List<SelectListItem>)ViewBag.State, "Select State", new { @class = "form-control", id = "state" })
                            @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
</div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.County, new { @class = "control-label" })
                    <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                       data-placement="center" title="County" data-content="<p>County of production.</p>">
                         <span class="glyphicon glyphicon-question-sign"></span></a>
                    <div class="row">
                        @Html.DropDownListFor(model => model.County, new SelectList(new List<string> { "Select County" }), new { @class = "form-control", name = "county", id = "county" })
                        @Html.ValidationMessageFor(model => model.County, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Category, new { @class = "control-label" })&nbsp;
                    
                    <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                       data-placement="center" title="Crop category" data-content="<p>Select the type of biofuel crops. If you do not find a crop in the list, please contact us.</p>">
                         <span class="glyphicon glyphicon-question-sign"></span></a>
                    <div class="row">
                        @Html.DropDownListFor(model => model.Category, (List<SelectListItem>)ViewBag.Category, "Select Crop Category", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProjectSize, new { @class = "control-label" })
                    <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                       data-placement="center" title="Help" data-content="<p>Enter size of the potential project. The area must be in acres. If you do not yet know the size, use any reasonable acre.</p>">
                         <span class="glyphicon glyphicon-question-sign"></span></a>
                    <div class="row">
                        @Html.TextBoxFor(model => model.ProjectSize, new { type = "number", min="1",  @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ProjectSize, "", new { @class = "text-danger" })
                    </div>
                </div>
                
                <div class="form-group">
                    @Html.LabelFor(model => model.ProjectLife, new { @class = "control-label" })
                   <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                       data-placement="left" title="Project Duration" data-content="<p>Duration of project expressed as total number of years 
                    between first plantation and final harvest with intermediate harvests in between. The number must a whole number i.e. 1 or 2 or 10 for a year.</p>">
                         <span class="glyphicon glyphicon-question-sign"></span></a>
                    <div class="row">
                        @Html.TextBoxFor(model => model.ProjectLife, new { @class = "form-control", type="number", min="1" })
                        @Html.ValidationMessageFor(model => model.ProjectLife, "", new { @class = "text-danger" })
                    </div>
                </div>
                
                <div class="form-group">
                    @Html.LabelFor(model => model.BiomassPriceAtFarmGate, new { @class = "control-label" })
                    <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                       data-placement="left" title="Farm Gate Price" data-content="<p>The price of the product at which it is sold by the farm (the farm gate price).</p>">
                         <span class="glyphicon glyphicon-question-sign"></span></a>
                    <div class="row">
                        @Html.EditorFor(model => model.BiomassPriceAtFarmGate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.BiomassPriceAtFarmGate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LandCost, new { @class = "control-label" })
                    <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                       data-placement="left" title="Land Cost" data-content="<p>Annual cost of land expressed as  $/acre/year.</p>">
                         <span class="glyphicon glyphicon-question-sign"></span></a>
                    <div class="row">
                        @Html.EditorFor(model => model.LandCost, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LandCost, "", new { @class = "text-danger" })
                    </div>
                </div>
                
                <div class="form-group">
                    <div class="row">
                        <button type="reset" value="Reset" class="btn btn-default">Reset</button>&nbsp;&nbsp;
                        <input type="submit" value="Submit" class="btn btn-default" />

                    </div>
                </div>
             
            </div>
            <!-- Output-->

            <div class="col-md-8">
                @Html.Partial("_inputResult", Model)
            </div>
            

        </div>
    </div>
}



@section MyScripts {

    <script type="text/javascript">
        //http://www.codeproject.com/Articles/730953/Cascading-Dropdown-List-With-MVC-LINQ-to-SQL-and-A
        $(document).ready(function () {

            
            $("#county").prop("disabled", true);

            if ($('#state').val() != "Select State") {
                $("#county").prop("disabled", false);
                populateCounty();
            }

            

            $("#state").change(function () {
                if ($("#state").val() != "Select County") {
                    populateCounty();
                }

            }
    );
            //$("#summaryHead").html('<h2>Summay for Switchgrass in'+$('#county').val() + "," + $('#state').val() + '</h2>');

        });

        function populateCounty() {

            //alert("getting couty");
            var ddlCounty = $("#county");
            $.ajax({
                url: "/data/CountiesForState",
                cache: false,
                type: "GET",
                data: { state: $("#state").val() },

                success: function (data) {
                    $("#county").empty();
                    ddlCounty.append($('<option></option>').val('').html("Select County"));
                    $.each(data, function (id, option) {
                        ddlCounty.append($('<option></option>').val(option.id).html(option.name));
                    });
                    $("#county").prop("disabled", false);
                },

                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve county.');
                    $("#county").prop("disabled", true);
                }
            });
        }
    </script>



}

