@using System.Collections.Generic
@using BiofuelSouth.Models
@model BiofuelSouth.Models.Input



@{
    ViewBag.Title = "Index";
}
@using (Html.BeginForm())
{


    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>DSS Input</h4>
        <div class="row">
            <!-- Input Column-->
            <hr />
            <div class="container col-md-4">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        @Html.DropDownListFor(model => model.Category, new SelectList(ViewBag.Category), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        @Html.DropDownListFor(model => model.State, new SelectList(ViewBag.State), new { @class = "form-control", id = "state" })
                        @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.County, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        @Html.DropDownListFor(model => model.County, new SelectList(new List<string> { "Select County" }), new { @class = "form-control", name = "county", id = "county" })
                        @Html.ValidationMessageFor(model => model.County, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProjectSize, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        @Html.EditorFor(model => model.ProjectSize, new { text = 1, htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ProjectSize, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.InterestRate, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        @Html.EditorFor(model => model.InterestRate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.InterestRate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProjectLife, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        @Html.EditorFor(model => model.ProjectLife, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ProjectLife, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LandCost, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        @Html.EditorFor(model => model.LandCost, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LandCost, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AdministrativeCost, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        @Html.EditorFor(model => model.AdministrativeCost, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AdministrativeCost, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.IncentivePayment, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        @Html.EditorFor(model => model.IncentivePayment, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.IncentivePayment, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.YearsOfIncentivePayment, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        @Html.EditorFor(model => model.YearsOfIncentivePayment, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.YearsOfIncentivePayment, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BiomassPriceAtFarmGate, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        @Html.EditorFor(model => model.BiomassPriceAtFarmGate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.BiomassPriceAtFarmGate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AvailableEquity, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        @Html.EditorFor(model => model.AvailableEquity, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AvailableEquity, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.LoanAmount, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        @Html.EditorFor(model => model.LoanAmount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LoanAmount, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.EquityLoanInterestRate, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        @Html.EditorFor(model => model.EquityLoanInterestRate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EquityLoanInterestRate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <!-- Result Column-->
            <div class="col-md-8">
                @if (ViewBag.Results)
                {
                    <div class="row" id="summaryHead">
                        <h2>Summay for @Model.Category in @(Constants.CountyName(Model.County)), @Model.State</h2>
                    </div>


                    <div class="row table-bordered">
                        <h3>Productivity and Cost</h3>
                        <div>
                            Estimated Annual Production: @Model.GetAnnualProductivity().ToString("####.00") ton
                        </div>
                        <div>
                            Estimated Annual Cost: @Model.GetAnnualCost().ToString("C")
                        </div>
                        <div>
                            Estimated Annual Revennue: @Model.GetAnnualRevenue().ToString("C")
                        </div>
                    </div>
                    <div class="row table-bordered">

                        <h3>Graphical Summary</h3>
                        <ul>
                            <li>Chart Displaying Average Productivity and Cost of Various Potential Biofuels in this County</li>

                            <li>Chart Displaying Trend of cost and production for this crop in the county</li>
                            <li>
                                If the selection is made for the state, the summary is displayed for the state.
                                Likewise, if the state is not selected, then teh summary for covered state will be displayed.
                            </li>
                        </ul>

                    </div>
                

                    <div class="row table-bordered">
                        <h3>More Information</h3>
                        <div>
                            Suggest Some Steps Based on Retrieved Results.
                        </div>

                    </div>





                }
                else
                {
                    <text>

                        <br />Results will be here upon submitting the button. Display Help information about using the DSS.
                        <br /> User can change the parameter in the left any time, the result will be displayed here.


                        <h3>Graphical Summary/ChartOutput</h3>
                        <li>Chart Displaying Average Producitvity and Cost of Various Potential Biofuels in this County</li>
                        <li>Chart Displaying Trend of cost and production for this crop in the county</li>

                        If the selection is made for the state, the summary is displayed for the state.
                        Likewise, if the state is not selected, then teh summary for covered state will be displayed.
                    </text>
                }
            </div>
        </div>
        <!-- Buttons and Other Controls-->
        <div class="row">
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Submit" class="btn btn-default" />
                </div>
            </div>
        </div>

        </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section MyScripts {

    <script type="text/javascript">
        //http://www.codeproject.com/Articles/730953/Cascading-Dropdown-List-With-MVC-LINQ-to-SQL-and-A
        $(document).ready(function () {
            $("#county").prop("disabled", true);

            if ($('#state').val() != "Select State") {
                $("#county").prop("disabled", false);
                populateCounty();
            }


            $("#state").change(function () {
                if ($("#state").val() != "Select County") {
                    populateCounty();
                }

            }
    );
            //$("#summaryHead").html('<h2>Summay for Switchgrass in'+$('#county').val() + "," + $('#state').val() + '</h2>');

        });

        function populateCounty() {
            var ddlCounty = $("#county");
            $.ajax({
                url: "/data/CountiesForState",
                cache: false,
                type: "GET",
                data: { state: $("#state").val() },

                success: function (data) {
                    $("#county").empty();
                    ddlCounty.append($('<option></option>').val('').html("Select County"));
                    $.each(data, function (id, option) {
                        ddlCounty.append($('<option></option>').val(option.id).html(option.name));
                    });
                    $("#county").prop("disabled", false);
                },

                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve county.');
                    $("#county").prop("disabled", true);
                }
            });
        }
    </script>



}

