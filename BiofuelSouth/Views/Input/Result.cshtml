@using BiofuelSouth.Models
@model Input

@{
    ViewBag.Title = "title";
    var mergeCol = @Model.General.ProjectLife+1;

}

<div class="container">


    <div class="row" id="summaryHead">
        <div class="col-md-12 col-lg-12">
            <h2>Summary for @Model.General.Category in @(Constants.CountyName(Model.General.County)), @Model.General.State</h2>
        </div>

    </div>

    <div class="row">

        <div class="col-md-2 col-lg-3 bg-info">
            <p>
                @if (Model.General.ProjectLife > 0)
                {

                    <div>
                        Estimated Net Annual Production (tons): @Math.Round(Model.GetAnnualProductionList().Average(), 0)

                    </div>
                    <div>
                        Estimated Net Production (tons): @Math.Round(Model.GetAnnualProductionList().Sum(), 0)

                    </div>
                    <div>
                        Estimated Annual Cost: @Model.GetAnnualCost().ToString("C")
                    </div>
                    <div>
                        @{
                    var annualRevennue = (Model.GetAnnualProductionList().Average() * Model.General.BiomassPriceAtFarmGate);
                        }
                        Estimated Annual Revennue: @annualRevennue.ToString("C")

                    </div>

                    <div>
                        NPV: @Model.GetNPV().ToString("C")
                    </div>
                }
            </p>
            <p>
                <h3>Assumptions and Parameters</h3>
                <div>
                    TBD: State all the defualt values used. <br />
                    Biomass Price: @Model.General.BiomassPriceAtFarmGate.ToString("C0") <br />
                    Project Size: @Model.General.ProjectSize.ToString("##,###") <br />
                </div>
                <div class="text-danger">
                    TBD: The current result does not include financials.
                </div>
            </p>
            <p>
                <h3>More Information</h3>
                <div>
                    TBD: Suggest further steps based on resutls. For example tranportation, near by facilities etc.
                </div>
                <div>
                    TBD: Show all the relevant contacts applicable for the results (e.g. FSA, etc)
                </div>
            </p>
        </div>

        <div class="col-md-10 col-lg-9">
            <strong>Estimated Production, Cost and Revenue</strong>
            <table class="table table-responsive table-bordered table-striped">
                <thead>
                    <tr>
                        <th rowspan="2">Description</th>
                        <th colspan="10">Year</th>
                    </tr>
                    <tr>
                        @{
                            for (var i = 0; i < Model.General.ProjectLife; i++)
                            {
                                <th>@(i + 1)</th>
                            }
                        }
                    </tr>
                </thead>


                @if (Model.GetStorageLossFactor() > 0)
                {
                    <tr>
                        <td colspan="@mergeCol" class="mergeCol">Production</td>
                    </tr>
                    <tr>
                        <td>
                            Gross Production (tons/year)
                        </td>
                        @foreach (var a in Model.GetGrossProductionList())
                        {
                            <td>@String.Format("{0:#,###,###}", Math.Round(a, 0))</td>
                        }
                    </tr>

                    <tr>
                        <td colspan="@mergeCol" class="mergeCol">Storage</td>
                    </tr>

                    <tr>
                        <td>
                            Storage Loss (tons/year)
                        </td>
                        @foreach (var a in Model.GetGrossProductionList())
                        {
                            <td>@String.Format("{0:#,###,###}", Math.Round(a * Model.GetStorageLossFactor() * Model.Storage.StorageTime / 200 * Model.Storage.PercentStored / 100, 0))</td>
                        }
                    </tr>

                }

                <tr>
                    <td>
                        Net Production (tons/year)
                    </td>
                    @foreach (var a in Model.GetAnnualProductionList())
                    {
                        <td>@String.Format("{0:#,###,###}", Math.Round(a, 0))</td>
                    }
                </tr>
                <tr>
                    <td colspan="@mergeCol" class="mergeCol">Cost and Revenue</td>
                </tr>
                <tr>
                    <td>
                        Revenue ($)
                    </td>
                    @foreach (var a in Model.GetRevenues())
                    {
                        <td>@String.Format("{0:#,###,###}", Math.Round(a.TotalRevenue, 0))</td>

                    }

                </tr>
                <tr>
                    <td>
                        Cost ($)
                    </td>
                    @foreach (var a in Model.GetExpenditures())
                    {

                        <td>@String.Format("{0:#,###,###}", @Math.Round(a.TotalExpenses, 0))</td>
                    }

                </tr>
                <tr>
                    <td>
                        CashFlow ($)
                    </td>
                    @foreach (var a in Model.GetCashFlow())
                    {
                        <td> @String.Format("{0:#,###,###}", @Math.Round(a, 0))</td>
                    }

                </tr>

            </table>
            
            <div id="chartButton">
                <input type="checkbox" id="showProductivity" name="showProductivity" checked> Display Productivity Chart
                <input type="checkbox" id="showCostRevenue" name="showCostRevenue" checked> Display Cost/Revenue Chart 
            </div>
      
               
                    <div id="AnnualProductionChart">
                        @{
                            var urlAnnualProduction = Url.Action("ShowChart", "Chart", new { @cacheKey = ViewBag.cacheKey });
                            <img src="@urlAnnualProduction" class="img-responsive" alt="Annual Production Chart" />

                        }                       
                        
                    </div>
                    <div id="CostRevenueChart">
                        @{
                            var urlAnnualProduction1 = Url.Action("ShowChart", "Chart", new { @cacheKey = ViewBag.cacheKey1 });
                            <img src="@urlAnnualProduction1" class="img-responsive" alt="Revenue Chart" />
                        }
                        
                    </div>
                   


      

        </div>

    </div>

    @Html.Partial("_Disclaimer")
</div>

<script>
    $(document).ready(function() {
        $('#showProductivity').change(function() {
            if ($(this).is(':checked')) {
                $('#AnnualProductionChart').show();
            } else {
                $('#AnnualProductionChart').hide();
            };
        });

        $('#showCostRevenue').change(function () {
            if ($(this).is(':checked')) {
                $('#CostRevenueChart').show();
            } else {
                $('#CostRevenueChart').hide();
            };
        });
    });
</script>