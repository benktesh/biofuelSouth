@using BiofuelSouth.Models
@model BiofuelSouth.Models.Storage

@{
    ViewBag.Title = "Index";
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @*@Html.Partial("_DSSMenu")*@
        <div class="row">

            <div class="container col-md-9">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @*<div id="hiddenInput" hidden="hidden">
                @Html.Partial("_inputPartial")
            </div>*@

                <div class="row">
                    <div class="col-md-5 form-group">
                        @Html.LabelFor(model => model.RequireStorage, new { @class = "control-label" })
                        <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                           data-placement="center" title="Require Finance" data-content="<p>If the project require
                            storage, select Yes. Or select No if storage is not required. </p>">
                            <span class="glyphicon glyphicon-question-sign"></span></a>
                        <span class="required">Required </span>

                        @Html.DropDownListFor(x => x.RequireStorage, Constants.GetYesNo(), "Select", new { @class = "form-control", required = "required" })
                        @Html.ValidationMessageFor(model => model.RequireStorage, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="row" id="storageParameter" hidden="hidden">
                    <div class="col-md-4">
                        <div class="form-group">

                            @Html.LabelFor(model => model.StorageTime, new { @class = "control-label" })<span class="required">Required</span>
                            <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                               data-placement="left" title="Storage Time" data-content="<p>Number of days harvested biomass crop require storage facility.
                    The maximum number of days for storage is 200 days. </p>">
                                <span class="glyphicon glyphicon-question-sign"></span></a>
                            @Html.TextBoxFor(model => model.StorageTime, new { @class = "form-control", @Value="" })
                            @Html.ValidationMessageFor(model => model.StorageTime, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">

                            @Html.LabelFor(model => model.PercentStored, new { @class = "control-label" })<span class="required">Required</span>
                            <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                               data-placement="left" title="Storage Percent" data-content="<p>Proportion of harvested crop requiring storage.
                       For example, out of the 100 tons of crop harvested, if only 20 tons require storage while rest of the 80 tons are sold at the time of harvest, then
                    proportion requiring storage can be calculated as 20/100*100% = 20%.</p>"><span class="glyphicon glyphicon-question-sign"></span></a>

                            @Html.TextBoxFor(model => model.PercentStored, new { @class = "form-control", @Value=""})
                            @Html.ValidationMessageFor(model => model.PercentStored, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            
                            @Html.LabelFor(model => model.StorageMethod, new { @class = "control-label" })<span class="required">Required</span>
                            <a href="#" rel="popover" class="" data-toggle="popover" tabindex="0" data-trigger="focus"
                               data-placement="left" title="Storage Percent" data-content="<p>After-harvest storage methods of switchgrass and other perennial grasses grown for biofuel have a significant effect on the profitability and success of an enterprise. Depending on how it's harvested, feedstock can be stored as round or square dry bales, or as a moist product in bunkers or silo bags.</p>">
                                <span class="glyphicon glyphicon-question-sign"></span></a>
                            @Html.DropDownListFor(model => model.StorageMethod, Constants.GetStorageMethod(), "Select Method", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.StorageMethod, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @Html.Partial("_storageCostSelection", Model)

                </div>
               
                <div class="row">
                    <div class="form-group col-md-6">
                        <button type="reset" value="Reset" class="btn btn-default">Reset</button>&nbsp;&nbsp;
                        <input type="submit" value="Submit" class="btn btn-default" />
                    </div>
                </div>

            </div>
         
            <div class="col-md-3">
                <h4>DSS Input: Storage Parameters</h4>
                TBD: Instruction and Steps
            </div>

        </div>

    </div>
}


@section MyScripts {

    <script type="text/javascript">
        //http://www.codeproject.com/Articles/730953/Cascading-Dropdown-List-With-MVC-LINQ-to-SQL-and-A
        $(document).ready(function () {
            $("#county").prop("disabled", true);

            if ($('#state').val() != "Select State") {
                $("#county").prop("disabled", false);
                populateCounty();

            }

            $('#RequireStorage').change();
            $('#CostOption').change();


            $("#state").change(function () {
                if ($("#state").val() != "Select County") {
                    populateCounty();
                }

            }
    );
            //$("#summaryHead").html('<h2>Summay for Switchgrass in'+$('#county').val() + "," + $('#state').val() + '</h2>');

        });

        function populateCounty() {
            var ddlCounty = $("#county");
            $.ajax({
                url: "/data/CountiesForState",
                cache: false,
                type: "GET",
                data: { state: $("#state").val() },

                success: function (data) {
                    $("#county").empty();
                    ddlCounty.append($('<option></option>').val('').html("Select County"));
                    $.each(data, function (id, option) {
                        ddlCounty.append($('<option></option>').val(option.id).html(option.name));
                    });
                    $("#county").prop("disabled", false);
                },

                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve county.');
                    $("#county").prop("disabled", true);
                }
            });
        }

        $('#CostOption').on("change", function() {
            if (this.value == 1) {
                $('#UserSupplyStorageCost').show();

            } else {
                $('#UserSupplyStorageCost').hide();
                
            }
            if (this.value == 2) {
                $('#UserSupplyMaterialCost').show();

            } else {
                $('#UserSupplyMaterialCost').hide();

            }
        });

        $('#RequireStorage').change(function () {

            // alert($('#RequireFinance').val());
            if ($('#RequireStorage').val() == 'true') {
                //alert($('#RequireFinance').val());
                $('#storageParameter').show();
            } else {
                $('#storageParameter').hide();
            }
        });



    </script>



}

